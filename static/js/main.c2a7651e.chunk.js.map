{"version":3,"sources":["components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkform/ImageLinkForm.js","components/Rank/Rank.js","components/FaceRecognition/FaceRecognition.js","components/SignIn/SignIn.js","components/Register/Register.js","App.js","serviceWorker.js","index.js","components/Logo/brain1.jpg"],"names":["Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Logo","options","max","height","width","src","brain","alt","paddingTop","ImageLinkForm","onInputChange","onPictureSubmit","type","onChange","Rank","FaceRecognition","imageUrl","box","id","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","SignIn","props","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","fetch","method","headers","body","JSON","stringify","email","state","password","then","response","json","user","loadUser","this","htmlFor","name","React","Component","Register","onNameChange","class","particlesOptions","particles","number","density","enable","value_area","initialState","input","route","entries","joined","App","data","detectFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Width","Number","Height","console","log","left_col","top_row","right_col","bottom_row","displayFaceBox","count","Object","assign","catch","err","params","onButtonSubmit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.c2a7651e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navigation = ( {onRouteChange, isSignedIn} ) => {\r\n    \r\n        if(isSignedIn) {\r\n            return (\r\n                <nav style={{display:'flex', justifyContent: 'flex-end'}}>\r\n                <p onClick={() => onRouteChange('signout')} className='f3 link dim black underline pa3 pointer'>Sign Out</p>\r\n                </nav>\r\n            )\r\n            \r\n        } else {\r\n            return(\r\n                <nav style={{display:'flex', justifyContent: 'flex-end'}}>\r\n                    <p onClick={() => onRouteChange('home')} className='f3 link dim black underline pa3 pointer'>Sign In</p>\r\n\r\n                    <p onClick={() => onRouteChange('Register')} className='f3 link dim black underline pa3 pointer'>Register</p>\r\n                </nav>\r\n\r\n                \r\n            );\r\n            \r\n\r\n        }\r\n        \r\n    \r\n}\r\n\r\nexport default Navigation","import React from 'react';\r\n\r\nimport Tilt from 'react-tilt'\r\nimport './Logo.css'\r\nimport brain from './brain1.jpg'\r\n\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className='ma4 mt0 center' >\r\n            <Tilt className=\"Tilt br2 shadow-2 img-center\" options={{ max : 25 }} style={{ height: 200, width: 200 }} >\r\n                <div className=\"Tilt-inner pa3 \"> \r\n                    <img src={brain} alt='logo'style={{paddingTop:'5px'}} />\r\n                </div>\r\n                \r\n            </Tilt>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo","import React from 'react';\r\n\r\nimport './ImageLinkForm.css';\r\n\r\n\r\n\r\nconst ImageLinkForm = ( {onInputChange, onPictureSubmit}) => {\r\n    return (\r\n        <div >\r\n            <p className=' center f3'> {'This app will detect faces in your pictures. Give it a try!'} </p>\r\n            <div className='center'>\r\n            <div className='center form pa4 br3 shadow-5'>\r\n                <input className='f4 pa2 w-70 center' type='text' onChange={onInputChange}/>\r\n                <button className='w-30 grow f4 link ph3 pv2 dib white bg-light-red' onClick={ onPictureSubmit}> Detect </button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageLinkForm","import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\nconst Rank = () => {\r\n    return (\r\n        <div className='center ma2 pa2' >\r\n          <div className='white f3 pa4'>\r\n            {'Harry, your current entry count is ...'}\r\n          </div>\r\n          <div className='white f3 pa4'>\r\n            {'2'}\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rank","import React from 'react';\r\n\r\nimport './FaceRecognition.css'\r\n\r\nconst FaceRecognition = ({imageUrl, box}) => {\r\n    return (\r\n        <div className='center ma' >\r\n            <div className='absolute mt2'>\r\n                <img id='input-image' src ={imageUrl} alt='img'width='500px' height='auto'/>\r\n                \r\n                <div className='bounding-box' style={{top: box.topRow, right:box.rightCol, bottom:box.bottomRow, left:box.leftCol}} ></div>\r\n            </div>      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FaceRecognition","import React from 'react';\r\n\r\n\r\nclass SignIn extends React.Component  {\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            signInEmail: '',\r\n            signInPassword: ''\r\n        }\r\n    }\r\n    onEmailChange = (event) => {\r\n        this.setState({signInEmail: event.target.value})\r\n    }\r\n    onPasswordChange = (event) => {\r\n        this.setState({signInPassword: event.target.value})\r\n    }\r\n\r\n    onSubmitSignIn = () => {\r\n        fetch('http://localhost:3000/signin', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                email: this.state.signInEmail,\r\n                password: this.state.signInPassword,\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(user => {\r\n            if (user.id) {\r\n                this.props.loadUser(user)\r\n                this.props.onRouteChange('home');\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    render(){\r\n        const {onRouteChange} = this.props\r\n        return (\r\n            <article className=\"br2 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw5 center\">\r\n                <main className=\"pa4 black-80 \">\r\n                    <div className=\"measure\">\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                            <legend className=\"f1 fw6 ph0 mh0 center\">Sign In</legend>\r\n                            <div className=\"mt3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor='email-address'>Email</label>\r\n                                <input onChange={this.onEmailChange} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\"/>\r\n                            </div>\r\n                            <div className=\"mv3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor='Password'>Password</label>\r\n                                <input onChange={this.onPasswordChange} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\"/>\r\n                            </div>\r\n                        </fieldset>\r\n                        <div className=\"center\">\r\n                            <input \r\n                                onClick={ this.onSubmitSignIn}\r\n                                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n                                type=\"submit\" \r\n                                value=\"Sign in\"/>\r\n                        </div>\r\n                        \r\n                        <div className=\"lh-copy mt3 center\">\r\n                            <p onClick={() => onRouteChange('Register')} className=\"f6 link dim black db pointer\">Register</p>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n          </article>\r\n        )\r\n\r\n    }\r\n   \r\n}\r\n\r\nexport default SignIn","import React from 'react';\r\n\r\n\r\nclass Register extends React.Component  {\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            name: ''\r\n        }\r\n    }\r\n    onNameChange = (event) => {\r\n        this.setState({name: event.target.value})\r\n    }\r\n    onEmailChange = (event) => {\r\n        this.setState({email: event.target.value})\r\n    }\r\n    onPasswordChange = (event) => {\r\n        this.setState({password: event.target.value})\r\n    }\r\n\r\n    \r\n    onSubmitSignIn = () => {\r\n        fetch('http://localhost:3000/register', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                name: this.state.name,\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(user => {\r\n            if (user.id) {\r\n                this.props.loadUser(user)\r\n                this.props.onRouteChange('home');\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n\r\n    render(){\r\n        const {onRouteChange} = this.props\r\n        return (\r\n            <article className=\"br2 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw5 center\">\r\n            <main className=\"pa4 black-80 \">\r\n                <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f1 fw6 ph0 mh0 center\">Register</legend>\r\n                        <div class=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Name</label>\r\n                            <input onChange={this.onNameChange} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"text\" name=\"Name\"  id=\"name\"/>\r\n                        </div>\r\n                        <div class=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                            <input onChange={this.onEmailChange} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\"/>\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                            <input onChange={this.onPasswordChange} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\"/>\r\n                        </div>\r\n                    </fieldset>\r\n                    <div className=\"center\">\r\n                        <input \r\n                            onClick={ this.onSubmitSignIn}\r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n                            type=\"submit\" \r\n                            value=\"Register\"/>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n      </article>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Register","import React from 'react';\n\nimport './App.css';\n\n// 3rd party dependencies\nimport Particles from 'react-particles-js'\n\n\n//Components made by me\nimport Navigation from './components/Navigation/Navigation'\nimport Logo from './components/Logo/Logo'\nimport ImageLinkForm from './components/ImageLinkform/ImageLinkForm'\nimport Rank from './components/Rank/Rank'\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition'\nimport SignIn from './components/SignIn/SignIn'\nimport Register from './components/Register/Register'\n\n\n\n\n //background effect\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\nconst initialState = {\n    input: '',\n    imageUrl: '',\n    box: {},\n    route:'SignIn',  // must be spelt the same as the JS file 'SignIn.js'\n    isSignedIn: false,\n    user: {\n      id: '',\n      name: '',\n      password: '',\n      email: '',\n      entries: 0,\n      joined: ''\n    }\n  }\n\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n      this.state = initialState\n  }\n\n  loadUser = (data) => {\n    this.setState({user: {\n      id: data.id,\n      name: data.name,\n      password: data.password,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    }})\n\n  }\n\n  detectFaceLocation = (data) => {\n    let clarifaiFace= data.outputs[0].data.regions[0].region_info.bounding_box\n    let image=document.getElementById('input-image');\n    let Width = Number(image.width);\n    let Height = Number(image.height);\n    console.log(data.outputs[0].data.regions[0].region_info.bounding_box);\n   console.log(Width,Height);\n   return{\n     leftCol: clarifaiFace.left_col * Width,\n     topRow: clarifaiFace.top_row * Height,\n     rightCol: Width - (clarifaiFace.right_col * Width),\n     bottomRow: Height - (clarifaiFace.bottom_row * Height)\n   }\n   \n  }\n  displayFaceBox = (box) => {\n    console.log(box);\n    this.setState( {box: box} )\n  }\n\n  onInputChange = (event) => {\n    this.setState( {input: event.target.value})\n\n  }\n\n  onPictureSubmit = () => {\n      this.setState( {imageUrl: this.state.input} );\n      fetch('http:localhost:3000/imageurl', {\n        method: 'post',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n            input: this.state.input\n        })\n      })\n      .then(response => response.json())\n      .then(response => {\n        if(response){\n          fetch('http:localhost:3000/image', {\n            method: 'put',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                id: this.state.user.id\n            })\n          })\n          .then(response => response.json())\n          .then(count => {\n            this.setState(Object.assign(this.state.user,{entries: count}) )\n          })\n          .catch(console.log)\n        }\n      \n        \n        this.displayFaceBox(this.detectFaceLocation(response)) \n      })\n      .catch(err => console.log(err));\n  }\n\n  onRouteChange = (route) => {\n    if(route ==='signout') {\n      this.setState(initialState)\n    } else if(route === 'home') {\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: route});\n  }\n\n  render() {\n   // isSignedIn, imageUrl, route, box can be destructured to this --> const { isSignedIn, imageUrl, route, box } =this.state;\n    return (\n      <div>\n      <Particles className='particles'  params={particlesOptions} />\n        <Navigation isSignedIn={this.state.isSignedIn} onRouteChange = {this.onRouteChange} />\n        { this.state.route === 'home' \n          ? \n            <div>\n              <Logo />\n              <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onPictureSubmit}/>\n              <Rank />\n              <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl}/>\n            </div> \n          : (\n            this.state.route ==='SignIn' \n            ?\n            <div>\n            <SignIn onRouteChange = {this.onRouteChange} />\n            </div>\n            \n            :\n            <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n            \n\n\n          )          \n    \n        }\n       \n      </div>\n    );\n  }\n  \n\n  }\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/brain1.b197ccde.jpg\";"],"sourceRoot":""}